shader
environmentlight(
    string env_map = "" [[ int texturefile = 1 ]],
    color light_color = color(1),
    float light_intensity = 1,
    float light_exposure = 1,
	float _3dl_spread = 1,
	float _3dl_diffuse_contribution = 1,
	float _3dl_specular_contribution = 1,
	float _3dl_hair_contribution = 1,
	float _3dl_volume_contribution = 1)
{
	vector R = normalize(I);

	// to align with Houdini env lights
	R = rotate(R, M_PI, vector(0,1,0));
	float s = (-atan2(R[0], R[2]) + M_PI) / (2*M_PI);
	float t = 1 - acos(R[1]) / M_PI;
	color tex = env_map == "" ? color(1) : (color)texture(env_map, s, t);
	Ci = emission() * tex * light_color * light_intensity * pow(2, light_exposure);

	/*
		Conditions are arranged so that if 3Delight tags hair rays as
		specular we won't be scaling twice.
	*/
	if( raytype("diffuse") )
		Ci *= _3dl_diffuse_contribution;
	else if( raytype("hair") )
		Ci *= _3dl_hair_contribution;
	else if( raytype("specular") )
		Ci *= _3dl_specular_contribution;
	else if( raytype("volume") )
		Ci *= _3dl_volume_contribution;

	Ci += transparent();
}
