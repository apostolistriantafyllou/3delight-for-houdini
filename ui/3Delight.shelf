<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
       It should not be hand-edited when it is being used by the application.
       Note, that two definitions of the same element are not allowed in a
       single file.
  -->
  <!-- Use command hou.shelves.reloadShelfFiles() in a Python Shell to
	   update any changes you want to test in this file.
  -->
  <toolshelf name="3delight" label="3Delight">
    <memberTool name="_3dl_rop_render_3Delight"/>
    <memberTool name="_3dl_rop_3Delight"/>
    <memberTool name="_3dl_rop_3DelightCloud"/>
    <memberTool name="_3dl_rop_select_3Delight"/>
    <memberTool name="_3dl_object_pointlight"/>
    <memberTool name="_3dl_object_spotlight"/>
    <memberTool name="_3dl_object_arealight"/>
    <memberTool name="_3dl_object_geolight"/>
    <memberTool name="_3dl_object_distantlight"/>
    <memberTool name="_3dl_object_envlight"/>
    <memberTool name="_3dl_object_skylight"/>
    <memberTool name="_3dl_object_incandescencelight"/>
    <memberTool name="_3dl_object_vdb"/>
  </toolshelf>

  <tool name="_3dl_rop_3Delight" label="ROP" icon="shelf_ROP_3Delight">
    <helpText><![CDATA[Creates a render node 3Delight.]]></helpText>
    <script scriptType="python"><![CDATA[
import roptoolutils

newnode = roptoolutils.createRenderNode('3Delight')
	]]></script>
  </tool>

  <tool name="_3dl_rop_3DelightCloud" label="ROP Cloud" icon="shelf_ROP_3Delight_cloud">
    <helpText><![CDATA[Creates a render node 3DelightCloud.]]></helpText>
    <script scriptType="python"><![CDATA[
import roptoolutils

newnode = roptoolutils.createRenderNode('3DelightCloud')
	]]></script>
  </tool>

  <tool name="_3dl_rop_render_3Delight" label="Render" icon="shelf_ROP_render_3Delight">
    <helpText><![CDATA[Launchs a render of the selected ROP 3Delight (or the first one found if no ROP is selected).]]></helpText>
    <script scriptType="python"><![CDATA[
import roptoolutils

out = hou.node("/out")
nodeFound = None
# try to find a selected ROP
for node in out.children():
    nodetype = node.type()
    if node.isCurrent() and (nodetype.name() == "3Delight" or nodetype.name() == "3DelightCloud"):
        nodeFound = node
        break
if nodeFound == None:
    # take the first ROP found
    for node in out.children():
        nodetype = node.type()
        if nodetype.name() == "3Delight" or nodetype.name() == "3DelightCloud":
            nodeFound = node
            break
if nodeFound != None:
    hou.node(nodeFound.path()).render()
else:
    newnode = roptoolutils.createRenderNode('3Delight')
    hou.node(newnode.path()).render()

	]]></script>
  </tool>

  <tool name="_3dl_rop_select_3Delight" label="Select" icon="shelf_ROP_select_3Delight">
    <helpText><![CDATA[Select one ROP 3Delight.]]></helpText>
    <script scriptType="python"><![CDATA[
import roptoolutils
import nodesearch

def custom_cb(node):
    nodetype = node.type()
    return nodetype.name() == "3Delight" or nodetype.name() == "3DelightCloud"

matcher = nodesearch.NodeType("3Delight", hou.ropNodeTypeCategory())
nodes = matcher.nodes(hou.root(), recursive=True)

if len(nodes) == 0:
    newnode = roptoolutils.createRenderNode('3Delight')
    newnode.moveToGoodPosition()
    newnode.setCurrent(True)
elif len(nodes) == 1:
    nodes[0].setCurrent(True)
else:
    nodeSel = hou.ui.selectNode(node_type_filter=hou.nodeTypeFilter.Rop, custom_node_filter_callback=custom_cb, title="Choose ROP 3Delight")
    if nodeSel != None:
        hou.node(nodeSel).setCurrent(True)
	]]></script>
  </tool>

  <tool name="_3dl_object_pointlight" label="Point Light" icon="OBJ_light_point">
    <helpURL>tool:pointlight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
	'pointlight1')
objecttoolutils.setGoodLightExposure(kwargs, newnode)

newnode.parm("light_type").set("point")
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_spotlight" label="Spot Light" icon="OBJ_light_spot">
    <helpURL>tool:spotlight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
    'spotlight1')
objecttoolutils.setGoodLightExposure(kwargs, newnode)

newnode.parm("light_type").set("point")
newnode.parm("coneenable").set(1)
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_arealight" label="Area Light" icon="OBJ_light_area">
    <helpURL>tool:arealight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils
kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, 0.0, 0.5, 0.5, 0.0)

newnode   = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
    'arealight1')
newnode.parmTuple("stdswitcher4")[0].set(1)
newnode.parmTuple("atten_folder_1")[0].set(1)
objecttoolutils.setGoodLightExposure(kwargs, newnode)

newnode.parm("light_type").set('grid')
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_geolight" label="Geometry Light" icon="OBJ_light_geo">
    <helpURL>tool:geolight</helpURL>
    <script scriptType="python"><![CDATA[
import toolutils
import objecttoolutils
kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, 0.0, 0.5, 0.5, 0.0)

# Get selection
scene_viewer = toolutils.sceneViewer()
targets = scene_viewer.selectObjects(
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
    allow_multisel = False,
    allowed_types = ("geo",))
newnode = objecttoolutils.genericTool(kwargs, 'hlight::2.0',
    'geolight1', False)
newnode.parmTuple("stdswitcher4")[0].set(1)
newnode.parmTuple("atten_folder_1")[0].set(1)
if len( targets ) > 0:
	target = targets[0]
	target_path = newnode.relativePathTo( target )
	newnode.setWorldTransform( target.worldTransform() )
	newnode.parm("areageometry").set( target_path )
	target.setDisplayFlag( False )

newnode.parm("light_type").set('geo')
newnode.parm("normalizearea").set(0)
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_distantlight" label="Distant Light" icon="OBJ_light_directional">
    <helpURL>tool:distantlight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
    'distantlight1',
    (not kwargs['ctrlclick'] and not kwargs['cmdclick']))

newnode.parm("light_type").set('distant')
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_envlight" label="Environment Light" icon="OBJ_light_environment">
    <helpURL>operator:Object/envlight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils
from objecttoolutils import OrientInfo

newnode = objecttoolutils.genericTool(kwargs, 'envlight',
	None, False, orient=OrientInfo('r'))
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hideFolder("Shadow", True)
group.hideFolder(("Light", "Render Options"), True)
group.hideFolder(("Light", "Sky Environment Map"), True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_skylight" label="Sky Light" icon="OBJ_light_sky">
    <helpURL>tool:skylight</helpURL>
	<toolMenuContext name="viewer">
      <contextNetType>OBJ</contextNetType>
    </toolMenuContext>
    <toolMenuContext name="network">
      <contextOpType>Object/envlight</contextOpType>
    </toolMenuContext>
    <script scriptType="python"><![CDATA[
import objecttoolutils
from objecttoolutils import OrientInfo

## Resources/houdini/python2.7libs/objecttoolutils.py
## Creates a linked sky light and sunlight pair.

##### WE DON'T CREATE THE SUN/DIRECTIONAL LIGHT. It is not necessary in our case.

# Create light obj, set it to sun (distant) type, and set color
# corresponding to 5778K sRGB(255,241,234)
#sun_node = objecttoolutils.genericTool(kwargs, 'hlight::2.0', 'sunlight1', False)
#sun_node.parm("light_type").set('sun')
#sun_node.parm("light_colorr").set( 1.0 )
#sun_node.parm("light_colorg").set( 0.9451 )
#sun_node.parm("light_colorb").set( 0.9176 )

# override the place where to position the sky node (relative to sun node)
#kwargs["nodepositionx"] = str( sun_node.position()[0] + 2.25 )
#kwargs["nodepositiony"] = str( sun_node.position()[1] - 0.50)
sky_node = objecttoolutils.genericTool(kwargs, 'envlight', 'skylight1', False)
sky_node.parm("skymap_enable").set(True)
sky_node.parm("folder11").set(1)
sky_node.parm("skymap_sun_dir_spec").set('Azimuth and Elevation')

#sun_node.parm( 'vm_envangle' ).set( sky_node.parm( 'skymap_sun_angular_size' ))
#sun_node.parm( 'rx' ).set( sky_node.parm( 'skymap_sun_calc_rotatex' ))
#sun_node.parm( 'ry' ).set( sky_node.parm( 'skymap_sun_calc_rotatey' ))
#sun_node.parm( 'rz' ).set( sky_node.parm( 'skymap_sun_calc_rotatez' ))

# Offset sun_node along the 'calculated vector' from sky_node
#sun_node_offset = (-10)
#sun_node_offset *= hou.scaleFromMKS('m1')

#sun_node.parm('tx').setExpression('ch("' + sun_node.relativePathTo(sky_node) + '/skymap_sun_calc_vectorx") * ' + str(sun_node_offset), hou.exprLanguage.Hscript)
#sun_node.parm('ty').setExpression('ch("' + sun_node.relativePathTo(sky_node) + '/skymap_sun_calc_vectory") * ' + str(sun_node_offset), hou.exprLanguage.Hscript)
#sun_node.parm('tz').setExpression('ch("' + sun_node.relativePathTo(sky_node) + '/skymap_sun_calc_vectorz") * ' + str(sun_node_offset), hou.exprLanguage.Hscript)

group = sky_node.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)

group.hide("skymap_enable", True)
group.hide("skymap_resolution", True)
group.hide("skymap_sun_dir_vector", True)
group.hide("skymap_sun_dir_rotate", True)
#group.hide("skymap_sun_azimuth", True)
#group.hide("skymap_sun_elevation", True)
group.hide("skymap_geo_latitude", True)
group.hide("skymap_geo_longitude", True)
group.hide("skymap_geo_month", True)
group.hide("skymap_geo_day", True)
group.hide("skymap_geo_time", True)
group.hide("skymap_geo_hr_spec", True)
group.hide("skymap_geo_time_zone", True)
group.hide("skymap_geo_daylight", True)
group.hide("skymap_geo_doy", True)
group.hide("skymap_sun_calc_spec", True)
group.hide("skymap_sun_calc_vector", True)
group.hide("skymap_sun_calc_rotate", True)

group.hideFolder("Shadow", True)
group.hideFolder(("Light", "Render Options"), True)
sky_node.setParmTemplateGroup(group)]]></script>
  </tool>


  <tool name="_3dl_object_incandescencelight" label="Incandescent Light" icon="OBJ_3Delight-dlIncandescenceLight">
    <helpText><![CDATA[Creates an incandescence light to .]]></helpText>
    <script scriptType="python"><![CDATA[
obj = hou.node("/obj")
newnode = obj.createNode("IncandescenceLight")
newnode.moveToGoodPosition()
newnode.setCurrent(True)
]]></script>
  </tool>

  <tool name="_3dl_object_vdb" label="VDB" icon="vdb_no_outline">
    <helpText><![CDATA[Opens a file selector for choosing one vdb file.]]></helpText>
    <script scriptType="python"><![CDATA[
file = hou.ui.selectFile(title = "Choose VDB File",
                         collapse_sequences = True,
                         file_type = hou.fileType.Geometry,
                         pattern = "*.vdb")
if file:
	obj = hou.node("/obj")

	newnode = obj.createNode("geo", "vdb")
	newfilenode = newnode.createNode("file", "vdb_file")
	newfilenode.setParms({"file": file, "loadtype": 4})
	newtrsnode = newnode.createNode("xform", "transform")
	newtrsnode.setInput(0, newfilenode)
	newtrsnode.moveToGoodPosition()
	newnode.moveToGoodPosition()
	newnode.setCurrent(True)

	mat = hou.node("/mat")
	newmatnode = mat.createNode("3Delight::vdbVolume", "vdbVolume")
	newmatnode.moveToGoodPosition()
	newnode.setParms({"shop_materialpath": newmatnode.path()})
]]></script>
  </tool>
</shelfDocument>
