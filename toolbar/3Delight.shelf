<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
       It should not be hand-edited when it is being used by the application.
       Note, that two definitions of the same element are not allowed in a
       single file.
  -->
  <!-- Use command hou.shelves.reloadShelfFiles() in a Python Shell to
	   update any changes you want to test in this file.
  -->
  <shelfSet name="shelf_set_2" label="Lights, Camera, Action">
    <memberToolshelf name="lights_and_cameras"/>
    <memberToolshelf name="collisions"/>
    <memberToolshelf name="particles"/>
    <memberToolshelf name="grains"/>
    <memberToolshelf name="vellum"/>
    <memberToolshelf name="rbd_dynamics"/>
    <memberToolshelf name="liquid_dynamics"/>
    <memberToolshelf name="melting_dynamics"/>
    <memberToolshelf name="ocean"/>
    <memberToolshelf name="volume_creation_dynamics"/>
    <memberToolshelf name="volume_sourcing_dynamics"/>
    <memberToolshelf name="volume_tools_dynamics"/>
    <memberToolshelf name="pyro_dynamics"/>
    <memberToolshelf name="sparse_pyro_dynamics"/>
    <memberToolshelf name="solid_dynamics"/>
    <memberToolshelf name="wire_dynamics"/>
    <memberToolshelf name="crowds"/>
    <memberToolshelf name="drive_simulation"/>
    <memberToolshelf name="3delight"/>
  </shelfSet>

  <toolshelf name="3delight" label="3Delight">
    <memberTool name="_3dl_rop_3Delight"/>
    <memberTool name="_3dl_object_pointlight"/>
    <memberTool name="_3dl_object_spotlight"/>
    <memberTool name="_3dl_object_arealight"/>
    <memberTool name="_3dl_object_geolight"/>
    <memberTool name="_3dl_object_distantlight"/>
    <memberTool name="_3dl_object_envlight"/>
    <memberTool name="_3dl_object_vdb"/>
  </toolshelf>

  <tool name="_3dl_rop_3Delight" label="ROP" icon="shelf_ROP_3Delight">
    <helpText><![CDATA[Creates a render node 3Delight.]]></helpText>
    <script scriptType="python"><![CDATA[
import roptoolutils

newnode = roptoolutils.createRenderNode('3Delight')
camname = newnode.evalParm("camera")

camnode = hou.node(camname)
found = camnode != None
if found:
    nodetype = camnode.type()
    found = nodetype.name() == "cam"
if not found:
    obj = hou.node("/obj")
    # try to find another camera
    for node in obj.children():
        nodetype = node.type()
        if nodetype.name() == "cam":
            newnode.setParms({"camera": node.path()})
            found = True
            break
# no camera found: creates one
if not found:
    obj = hou.node("/obj")
    strs = camname.rsplit("/", 1)
    newnode = obj.createNode("cam", strs[1])
	]]></script>
  </tool>

  <tool name="_3dl_object_pointlight" label="Point Light" icon="OBJ_light_point">
    <helpURL>tool:pointlight</helpURL>
	<readOnly/>
    <script scriptType="python"><![CDATA[
import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
	'pointlight1')
objecttoolutils.setGoodLightExposure(kwargs, newnode)

newnode.parm("light_type").set("point")
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_spotlight" label="Spot Light" icon="OBJ_light_spot">
    <helpURL>tool:spotlight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
    'spotlight1')
objecttoolutils.setGoodLightExposure(kwargs, newnode)

newnode.parm("light_type").set("point")
newnode.parm("coneenable").set(1)
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_arealight" label="Area Light" icon="OBJ_light_area">
    <helpURL>tool:arealight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils
kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, 0.0, 0.5, 0.5, 0.0)

newnode   = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
    'arealight1')
newnode.parmTuple("stdswitcher4")[0].set(1)
newnode.parmTuple("atten_folder_1")[0].set(1)
objecttoolutils.setGoodLightExposure(kwargs, newnode)

newnode.parm("light_type").set('grid')
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_geolight" label="Geometry Light" icon="OBJ_light_geo">
    <helpURL>tool:geolight</helpURL>
    <script scriptType="python"><![CDATA[
import toolutils
import objecttoolutils
kwargs['bbox'] = hou.BoundingBox(-0.5, -0.5, 0.0, 0.5, 0.5, 0.0)

# Get selection
scene_viewer = toolutils.sceneViewer()
targets = scene_viewer.selectObjects(
    prompt = toolutils.selectionPrompt(hou.objNodeTypeCategory()),
    allow_multisel = False,
    allowed_types = ("geo",))
newnode = objecttoolutils.genericTool(kwargs, 'hlight::2.0',
    'geolight1', False)
newnode.parmTuple("stdswitcher4")[0].set(1)
newnode.parmTuple("atten_folder_1")[0].set(1)
if len( targets ) > 0:
	target = targets[0]
	target_path = newnode.relativePathTo( target )
	newnode.setWorldTransform( target.worldTransform() )
	newnode.parm("areageometry").set( target_path )
	target.setDisplayFlag( False )

newnode.parm("light_type").set('geo')
newnode.parm("normalizearea").set(0)
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_distantlight" label="Distant Light" icon="OBJ_light_directional">
    <helpURL>tool:distantlight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils

kwargs['bbox_min'] = hou.Vector3(-1.5, -1.5, -1.5)
kwargs['bbox_max'] = hou.Vector3(1.5, 1.5, 1.5)
newnode = objecttoolutils.genericCameraLightTool(kwargs, 'hlight::2.0',
    'distantlight1',
    (not kwargs['ctrlclick'] and not kwargs['cmdclick']))

newnode.parm("light_type").set('distant')
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hide("vm_samplingquality", True)
group.hide("sepparm3", True)
group.hide("areamap", True)
group.hide("areamapspace", True)
group.hide("areamapnull", True)
group.hide("areamapblur", True)
group.hide("areamapscale", True)
group.hide("selfshadow", True)
group.hide("edgeenable", True)
group.hide("edgewidth", True)
group.hide("edgerolloff", True)
group.hide("sepparm4", True)
group.hide("pc_enable", True)
group.hide("pc_samples", True)
group.hide("pc_file", True)
group.hide("render_pointcloud", True)
group.hide("vm_shadingfactor", True)
group.hide("pc_camera_override", True)
group.hide("pc_camera", True)
group.hideFolder(("Light", "Attenuation Options"), True)
group.hideFolder("Shadow", True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_envlight" label="Environment Light" icon="OBJ_light_environment">
    <helpURL>operator:Object/envlight</helpURL>
    <script scriptType="python"><![CDATA[
import objecttoolutils
from objecttoolutils import OrientInfo

newnode = objecttoolutils.genericTool(kwargs, 'envlight',
	None, False, orient=OrientInfo('r'))
group = newnode.parmTemplateGroup()
group.hide("light_contrib", True)
group.hide("vm_lpetag", True)
group.hideFolder("Shadow", True)
group.hideFolder(("Light", "Render Options"), True)
group.hideFolder(("Light", "Sky Environment Map"), True)
newnode.setParmTemplateGroup(group)]]></script>
  </tool>

  <tool name="_3dl_object_vdb" label="VDB" icon="vdb_no_outline">
    <helpText><![CDATA[Opens a file selector for choosing one vdb file.]]></helpText>
    <script scriptType="python"><![CDATA[
import os

file = hou.ui.selectFile(title = "Choose VDB File",
                         collapse_sequences = True,
                         file_type = hou.fileType.Geometry,
                         pattern = "*.vdb")
if file:
	name = os.path.splitext(os.path.basename(file))[0]
	obj = hou.node("/obj")

	newnode = obj.createNode("geo", name)
	newfilenode = newnode.createNode("file", name)
	newfilenode.setParms({"file": file, "loadtype": 4})
	newtrsnode = newnode.createNode("xform", "transform")
	newtrsnode.setInput(0, newfilenode)
	newtrsnode.moveToGoodPosition()
	newnode.moveToGoodPosition()
	newnode.setCurrent(True)

	mat = hou.node("/mat")
	newmatnode = mat.createNode("3Delight::vdbVolume", "vdbVolume")
	newmatnode.moveToGoodPosition()
	newnode.setParms({"shop_materialpath": newmatnode.path()})
]]></script>
  </tool>
</shelfDocument>
