/*
    For the name encoding, see hou.text.encodeParm() and hou.text.decodeParm()
*/
{
    name        "nsi"
    label       "NSI"
    parmtag     { spare_opfilter        "!!SHOP/PROPERTIES!!" }
    parmtag     { spare_classtags       "render" }

/* Disable Lighting */
    parm {
        name    "xn__nsiglobaldisablelighting_2fbg"
        label   "Disable Lighting"
        type    toggle
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport toolbar" }
        parmtag { "usdvaluetype" "bool" }
        default { 0 }
        parmtag { "uiicon" VIEW_lighting_none }
        help "Enables a fast rendering mode for previews."
    }

/* Shading Samples */
    parm {
        name    "xn__nsiglobalshadingsamples_gebg"
        label   "Shading Samples"
        type    int
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "int" }
        default { 64 }
        range { 1! 400 }
        help "Quality of surface shading."
    }

/* Pixel Samples */
    parm {
        name    "xn__nsiglobalpixelsamples_69ag"
        label   "Pixel Samples"
        type    int
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "int" }
        default { 64 }
        range { 1! 100 }
        help "Quality of anti-aliasing, depth of field, motion blur."
    }

/* Volume Samples */
    parm {
        name    "xn__nsiglobalvolumesamples_tcbg"
        label   "Volume Samples"
        type    int
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "int" }
        default { 64 }
        range { 1! 400 }
        help "Quality of volumes."
    }

/* Viewport camera shutter */
    parm {
        name "xn__nsiglobaldefaultshutter_gebg"
        label "Camera Shutter"
        type float
        size 2
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "float2" }
        default { -0.25 0.25 }
    }

/* Max Diffuse Depth */
    parm {
        name    "xn__nsiglobalmaximumdiffusedepth_lmbg"
        label   "Max Diffuse Depth"
        type    int
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "int" }
        default { 2 }
        range { 0! 100 }
        help "Maximum number of diffuse bounces"
    }

/* Max Reflection Bounces */
    parm {
        name    "xn__nsiglobalmaximumreflectiondepth_hrbg"
        label   "Max Reflection Depth"
        type    int
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "int" }
        default { 2 }
        range { 0! 100 }
        help "Maximum number of reflection (specular) bounces"
    }

/* Max Refraction Depth */
    parm {
        name    "xn__nsiglobalmaximumrefractiondepth_hrbg"
        label   "Max Refraction Depth"
        type    int
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "int" }
        default { 4 }
        range { 0! 100 }
        help "Maximum number of refraction bounces"
    }

/* Max Hair Depth */
parm {
        name    "xn__nsiglobalmaximumhairdepth_phbg"
        label   "Max Hair Depth"
        type    int
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "int" }
        default { 5 }
        range { 0! 100 }
        help "Maximum number of hair bounces"
    }

/* Max Distance */
    parm {
        name    "xn__nsiglobalmaximumdistance_2fbg"
        label   "Max Distance"
        type    float
        size    1
        parmtag { "spare_category" "Quality" }
        parmtag { "uiscope" "viewport" }
        parmtag { "usdvaluetype" "float" }
        default { 1000 }
        range { 0! 10000 }
        help "Maximum number of hair bounces"
    }
}
// vim: set softtabstop=4 expandtab shiftwidth=4:
